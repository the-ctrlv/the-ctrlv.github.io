import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';

import { useContext, useEffect, useRef, useState } from 'react';

import SuggestedArticles from 'components/SuggestedArticles';
import PaginatedArticles from 'components/PaginatedArticles';
import { StyledArticle } from 'components/PaginatedArticles/styles';
import { MOCK_ARTICLES } from 'components/PaginatedArticles/helpers';
import Select from 'components/Select';

import placeholderBlogImage from 'assets/images/placeholder-blog.jpg';

import { BLOGNAV } from 'shared/helpers';
import { AnimateStartContext, SmoothScrollContext } from 'shared/context';
import { getClassNames, useWindowResize } from 'shared';

import { StyledBlog } from 'styles/blog';

function NavItem({ i, item, setFilterTag, filterTag }) {
  return (
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    <li
      key={i}
      className={getClassNames('content-start--horizontal', filterTag === item.filter && 'active')}
      onClick={() => setFilterTag(item.filter)}
    >
      <h2>{item.label}</h2>
    </li>
  );
}

export default function About() {
  const [isTabletMode, setIsTabletMode] = useState(null);
  const [filteredArticles, setFilteredArticles] = useState(MOCK_ARTICLES);
  const [filterTag, setFilterTag] = useState('All');

  const { width } = useWindowResize();

  const { gsapScroll } = useContext(SmoothScrollContext);
  const { isAnimationFinished } = useContext(AnimateStartContext);

  const gsap = gsapScroll?.gsap;
  const ScrollTrigger = gsapScroll?.ScrollTrigger;

  const triggerRef = useRef(null);

  useEffect(() => {
    if (width === 0) return;
    setIsTabletMode(width < 1024);
  }, [width]);

  useEffect(() => {
    if (filterTag === 'All') {
      setFilteredArticles(MOCK_ARTICLES);
    }
    if (filterTag === "Men's health") {
      setFilteredArticles(MOCK_ARTICLES.filter((item) => item.tag === "Men's Health"));
    }
    if (filterTag === 'Science') {
      setFilteredArticles(MOCK_ARTICLES.filter((item) => item.tag === 'Science'));
    }
    if (filterTag === 'Postage Research') {
      setFilteredArticles(MOCK_ARTICLES.filter((item) => item.tag === 'Postage Research'));
    }
  }, [filterTag]);

  useEffect(() => {
    if (isAnimationFinished) {
      gsap?.to('.content-start', {
        opacity: 1,
        y: 0,
        duration: 0.8,
        stagger: 0.2,
      });
      if (!isTabletMode) {
        gsap?.to('.content-start--horizontal', {
          delay: 0.8,
          opacity: 1,
          x: 0,
          duration: 0.8,
          stagger: 0.2,
        });
      }
    }
  }, [gsap, isAnimationFinished, isTabletMode]);

  useEffect(() => {
    if (width !== 0 && width > 1024 && triggerRef.current) {
      // setTimeout(() => {
      ScrollTrigger?.create({
        trigger: triggerRef.current,
        start: '-80px top',
        end: 'bottom 40%',
        pin: '.left-nav-pane',
      });
      // }, 100);
    } else {
      ScrollTrigger?.getAll().forEach((instance) => {
        instance.kill();
      });
    }
  }, [ScrollTrigger, width, triggerRef]);

  return (
    <>
      <Head>
        <title>Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <StyledBlog>
        <div className="section-title-wrapper">
          <h1 className="content-start">Our Blog</h1>
        </div>
        <div className="content-container blog-content flex-between" id="blogContent">
          {isTabletMode ? (
            <Select variant="blog" setFilterTag={setFilterTag} />
          ) : (
            <div className="height-container" ref={triggerRef}>
              <ul className="blog-content__left-pane left-nav-pane">
                {BLOGNAV.map((item, i) => (
                  <NavItem key={i} item={item} setFilterTag={setFilterTag} filterTag={filterTag} />
                ))}
              </ul>
            </div>
          )}

          <div className="blog-content__right-pane right-nav-pane">
            <Link className="article-link full-width content-start" href={`/blog/${MOCK_ARTICLES[0].slug}`}>
              <StyledArticle>
                <div className="article-image-wrapper">
                  <Image
                    priority
                    src={placeholderBlogImage.src}
                    width={placeholderBlogImage.width}
                    height={placeholderBlogImage.height}
                    alt={MOCK_ARTICLES[0].title}
                  />
                  <span className="article-tag">{MOCK_ARTICLES[0].tag}</span>
                </div>
                <h4 className="article-title">{MOCK_ARTICLES[0].title}</h4>
                <p className="article-text">{MOCK_ARTICLES[0].subtitle}</p>
              </StyledArticle>
            </Link>

            <PaginatedArticles
              filteredArticles={filteredArticles}
              articlesPerPage={isTabletMode ? 4 : 6}
              isBlogContent
              filterTag={filterTag}
            />
          </div>
        </div>

        <SuggestedArticles />
      </StyledBlog>
    </>
  );
}
