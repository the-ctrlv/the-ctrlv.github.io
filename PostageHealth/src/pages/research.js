import Head from 'next/head';
import Image from 'next/image';

import { useContext, useEffect, useRef, useState } from 'react';

import iconSearch from 'assets/icons/icon-search.svg';

import PaginatedArticles from 'components/PaginatedArticles';

import { MOCK_SEARCHDB } from 'shared/helpers';

import { AnimateStartContext, SmoothScrollContext } from 'shared/context';

import { StyledResearch } from 'styles/research';

export default function Research() {
	const [searchResults, setSearchResults] = useState(MOCK_SEARCHDB);
	const [inputValue, setInputValue] = useState('');
	const searchRef = useRef(null);

	const { gsapScroll } = useContext(SmoothScrollContext);
	const { isAnimationFinished } = useContext(AnimateStartContext);
	const gsap = gsapScroll?.gsap;

	useEffect(() => {
		if (inputValue === '') {
			setSearchResults(MOCK_SEARCHDB);
			return;
		}
		// eslint-disable-next-line max-len
		const results = MOCK_SEARCHDB.filter((item) => item.title.toLowerCase().includes(inputValue.toLowerCase()));
		setSearchResults(results);
	}, [inputValue]);

	useEffect(() => {
		if (isAnimationFinished) {
			gsap?.to('.content-start', {
				opacity: 1,
				y: 0,
				duration: 0.8,
				stagger: 0.2,
			});
		}
	}, [gsap, isAnimationFinished]);

	return (
		<>

			<Head>
				<title>Research</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<StyledResearch>
				<div className="section-title-wrapper">
					<h1 className="content-start">Search the Knowledge Base</h1>
					<div className="search-bar-wrapper content-start">
						<input
							type="text"
							placeholder="Enter your question"
							ref={searchRef}
							onKeyDown={(e) => {
								if (e.key === 'Enter') {
									setInputValue(searchRef.current.value);
								}
							}}
						/>
						<div
							className="btn-wrapper"
							onClick={() => {
								setInputValue(searchRef.current.value);
							}}
						>
							<Image
								src={iconSearch.src}
								alt="Search"
								width={21}
								height={21}
							/>
						</div>
					</div>
				</div>
				<div className="content-container content-container--search content-start">
					{searchResults.length > 0 && (
						<span className="results-quantity">
							Found {searchResults.length}
							{searchResults.length === 1 ? ' result' : ' results'}
						</span>
					)}
					<PaginatedArticles
						articlesPerPage={4}
						filteredArticles={searchResults}
						isSearchPage
						searchWords={inputValue}
					/>
				</div>
			</StyledResearch>
		</>
	);
}
